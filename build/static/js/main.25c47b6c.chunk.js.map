{"version":3,"sources":["components/contactList/contactListItem/ContactsListItem.module.css","components/container/Container.module.css","components/contactList/ContactsList.module.css","redux/phoneBook/phoneBook-types.js","redux/phoneBook/phoneBook-actions.js","components/form/Form.js","components/filter/Filter.js","components/container/Container.js","components/contactList/ContactList.js","components/contactList/contactListItem/ContactListItem.js","components/App.js","redux/phoneBook/phoneBook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","types","name","number","payload","id","shortid","generate","deleteContact","filterUpdate","initialState","Form","state","nameInputId","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","className","style","button","React","Component","PropsType","func","isRequired","connect","items","contacts","ContactsReducer","dispatch","actions","FilterReducer","target","Container","children","container","ContactsList","contactList","prototype","PropTypes","node","ContactListItem","onDeleteContact","map","contactItem","buttonDel","onClick","arrayOf","shape","string","findContact","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phoneBookReducer","devToolss","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.25c47b6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactsListItem_contactItem__ynUHM\",\"buttonDel\":\"ContactsListItem_buttonDel__3u4FY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__tKtss\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactsList_contactList__3svZr\"};","/* eslint-disable import/no-anonymous-default-export */\r\nconst ADDCONTACT = 'app/addContact';\r\nconst DELETECONTACT = 'app/deleteContact';\r\nconst CHANGEFILTER = 'app/changeFilter';\r\n\r\nexport default { ADDCONTACT, DELETECONTACT, CHANGEFILTER };\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport types from './phoneBook-types';\r\n\r\nconst addContact = createAction(types.ADDCONTACT, ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction(types.DELETECONTACT);\r\nconst filterUpdate = createAction(types.CHANGEFILTER);\r\n\r\nexport default { addContact, deleteContact, filterUpdate };\r\n","import React from 'react';\r\nimport style from './Form';\r\nimport shortid from 'shortid';\r\nimport PropsType from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/phoneBook/phoneBook-actions';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const hasContacts = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    // if (this.props.items.some(hasContacts)) {\r\n    //   alert(`Contact is already in contacts`);\r\n    //   return;\r\n    // }\r\n\r\n    this.props.onSubmit({ ...this.state });\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            id={this.nameInputId}\r\n          />\r\n        </label>\r\n        <label htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            id={this.numberInputId}\r\n          />\r\n        </label>\r\n        <button className={style.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.PropsType = {\r\n  onSubmit: PropsType.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.ContactsReducer,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(actions.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/phoneBook/phoneBook-actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <h3>Find contacts by name</h3>\r\n    <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.FilterReducer,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(actions.filterUpdate(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import style from \"./Container.module.css\";\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={style.container}>{children}</div>\r\n);\r\n\r\nexport default Container;\r\n","import React from 'react';\r\n// import ContactListItem from './contactListItem/ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport style from './ContactsList.module.css';\r\n\r\n// import { connect } from 'react-redux';\r\n// import contactsAction from '../../redux/phoneBook/phoneBook-actions';\r\n\r\nconst ContactsList = ({ children }) => {\r\n  return (\r\n    <ul className={style.contactList}>\r\n      {children}\r\n      {/* {findContact().map(({ id, name, number }) => {\r\n        return (\r\n          <ContactListItem\r\n            key={id}\r\n            id={id}\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={onDeleteContact}\r\n          />\r\n        );\r\n      })} */}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.prototype = {\r\n  children: PropTypes.node,\r\n};\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport style from './ContactsListItem.module.css';\r\nimport actions from '../../../redux/phoneBook/phoneBook-actions';\r\n\r\nconst ContactListItem = ({ onDeleteContact, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className={style.contactItem}>\r\n          {name}: {number}\r\n          <button\r\n            className={style.buttonDel}\r\n            type=\"submit\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactListItem.prototype = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nconst findContact = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  if (filter) {\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  }\r\n  return allContacts;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  // contacts: state.contacts.ContactsReducer,\r\n  contacts: findContact(\r\n    state.contacts.ContactsReducer,\r\n    state.contacts.FilterReducer,\r\n  ),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from 'react';\r\nimport Form from './form/Form.js';\r\nimport Filter from './filter/Filter';\r\nimport Container from './container/Container';\r\nimport ContactsList from './contactList/ContactList';\r\nimport ContactsListItem from './contactList/contactListItem/ContactListItem';\r\n\r\nclass App extends React.Component {\r\n  // state = {\r\n  //   contacts: [\r\n  //     { id: 'id-1', name: 'Endy Rhoads', number: '454-67-34' },\r\n  //     { id: 'id-2', name: 'Cliff Burton', number: '778-45-34' },\r\n  //     { id: 'id-3', name: 'Eddie Van Halen', number: '787-23-77' },\r\n  //     { id: 'id-4', name: 'Chuck Schuldiner', number: '366-45-20' },\r\n  //   ],\r\n  //   filter: '',\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   const contacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(contacts);\r\n\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (this.state.contacts !== prevState.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  // handleChange = event => {\r\n  //   const { name, value } = event.currentTarget;\r\n  //   this.setState({ [name]: value });\r\n  // };\r\n\r\n  // addContact = contact => {\r\n  //   if (!this.hasContacts(contact.name)) {\r\n  //     this.setState(({ contacts }) => ({\r\n  //       contacts: [contact, ...contacts],\r\n  //     }));\r\n  //   } else {\r\n  //     alert(`${contact.name} is already in contacts`);\r\n  //   }\r\n  // };\r\n\r\n  // hasContacts = name => {\r\n  //   return this.state.contacts.find(contact => {\r\n  //     return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\r\n  //   });\r\n  // };\r\n\r\n  // findContact = () => {\r\n  //   const { filter, contacts } = this.state;\r\n  //   const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n  //   if (filter.length) {\r\n  //     return contacts.filter(contact =>\r\n  //       contact.name.toLowerCase().includes(normalizedFilter),\r\n  //     );\r\n  //   } else {\r\n  //     return contacts;\r\n  //   }\r\n  // };\r\n\r\n  // deleteContact = contactId => {\r\n  //   this.setState(prevState => ({\r\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n  //   }));\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>PhoneBook</h1>\r\n        <Form />\r\n\r\n        <div>\r\n          <h2>Contacts</h2>\r\n          <Filter />\r\n          <ContactsList>\r\n            <ContactsListItem />\r\n          </ContactsList>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     value: state.value,\r\n//   };\r\n// };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './phoneBook-actions';\r\n\r\nconst ContactsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst FilterReducer = createReducer('', {\r\n  [actions.filterUpdate]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  ContactsReducer,\r\n  FilterReducer,\r\n});\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport phoneBookReducer from './phoneBook/phoneBook-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, phoneBookReducer),\r\n  },\r\n  middleware,\r\n  devToolss: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// Before\r\n// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from '../redux/contacts/contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './components/App.js';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}